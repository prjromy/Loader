@model Loader.Models.Company
@using Loader.Helper

<script src="~/Scripts/ch-treeview.js"></script>
@{
    Layout = null;

    var test = Model;
    var treeobj = new Loader.ViewModel.TreeViewParam(false, true, true, 0, Model.ParentId, ViewBag.ActiveText, "Select BranchSetup", "");
    Loader.ViewModel.TreeViewParam paramData = (Loader.ViewModel.TreeViewParam)ViewData["param"];
    var title = "Create Branch";
    if (Model.CompanyId != 0)
    {
        //treeobj = new Loader.ViewModel.TreeViewParam(false, true, true, 0, 1, ViewBag.ActiveText, "Select BranchSetup", "");
        title = "Edit Branch Setup";
    }
    var itemSize = "col-md-12";
    
    var valueSubmit = "Create";
    if (Model.CompanyId != 0)
    {
        valueSubmit = "Save";
    }

}
<div class="box box-warning BranchSetup-create">
    <div class="box-header with-border">

        <h3 class="box-title">@title </h3>

        <div class="box-tools pull-right">
            <button class="btn btn-box-tool" data-widget="collapse"> <i class="fa fa-minus"></i></button>
            <button class="btn btn-box-tool" data-widget="remove"><i class="fa fa-times"></i></button>
        </div><!-- /.box-tools -->
    </div><!-- /.box-header -->
    @*@using (Ajax.BeginForm("GetPatients", "Patient", new AjaxOptions
        {//GetPatients is name of method in PatientController
            InsertionMode = InsertionMode.Replace, //target element(#patientList) will be replaced
            UpdateTargetId = "patientList",
            LoadingElementId = "loader" // div with .gif loader - that is shown when data are loading
        }))*@
    @using (Html.BeginForm("Create", "BranchSetup", FormMethod.Post, new { @id = "createBranchSetup" }))
    {
        <div class="box-body">
            @Html.AntiForgeryToken()

            <div class="form-horizontal">
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })


                @Html.HiddenFor(x => x.CompanyId)
                @Html.HiddenFor(x => x.CompanyId)
                @*@Html.HiddenFor(x=>x.)*@


                <div class="form-group @itemSize">
                    @Html.LabelFor(model => model.ParentId, htmlAttributes: new { @class = "control-label col-md-3" })
                    <div class="col-md-9">

                        @Html.EditorForTree(model => model.ParentId, treeobj)
                        @Html.ValidationMessageFor(model => model.ParentId, "", new { @class = "text-danger" })
                    </div>
                </div>


                <div class="form-group col-md-12">
                    @Html.LabelFor(model => model.BranchName, htmlAttributes: new { @class = "control-label col-md-3" })
                    <div class="col-md-3">
                        @Html.TextBoxFor(model => model.BranchName, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.BranchName, "", new { @class = "text-danger" })
                    </div>
                    @Html.LabelFor(model => model.Address, htmlAttributes: new { @class = "control-label col-md-3" })
                    <div class="col-md-3">
                        @Html.TextBoxFor(model => model.Address, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.Address, "", new { @class = "text-danger" })
                    </div>

                </div>
                <div class="form-group col-md-12">
                    @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label col-md-3" })
                    <div class="col-md-3">
                        @Html.TextBoxFor(model => model.Email, new { @class = "form-control",@type="email" })
                        @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
                    </div>
                    @Html.LabelFor(model => model.PhoneNo, htmlAttributes: new { @class = "control-label col-md-3" })
                    <div class="col-md-3">
                        @Html.TextBoxFor(model => model.PhoneNo, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.PhoneNo, "", new { @class = "text-danger" })
                    </div>

                </div>

                <div class="form-group col-md-12">
                    @Html.LabelFor(model => model.Region, htmlAttributes: new { @class = "control-label col-md-3" })
                    <div class="col-md-3">
                        @Html.TextBoxFor(model => model.Region, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.Region, "", new { @class = "text-danger" })
                    </div>
                    @Html.LabelFor(model => model.State, htmlAttributes: new { @class = "control-label col-md-3" })
                    <div class="col-md-3">
                        @Html.TextBoxFor(model => model.State, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.State, "", new { @class = "text-danger" })
                    </div>

                </div>
                <div class="form-group col-md-12">
                    @Html.LabelFor(model => model.IsBranch, htmlAttributes: new { @class = "control-label col-md-3" })
                    <div class="col-md-3">
                        @if(Model.IsBranch==null)
                        {
                            Model.IsBranch = false;
                        }
                        @Html.CheckBox("IsBranch",Model.IsBranch.Value)
                        @Html.ValidationMessageFor(model => model.Region, "", new { @class = "text-danger" })
                    </div>
                    @Html.LabelFor(model => model.Prefix, htmlAttributes: new { @class = "control-label col-md-3" })
                    <div class="col-md-3">
                        @Html.TextBoxFor(model => model.Prefix, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.Prefix, "", new { @class = "text-danger" })
                    </div>

                </div>

                <div class="form-group col-md-12">
                    @Html.LabelFor(model => model.AdditionalUser, htmlAttributes: new { @class = "control-label col-md-3" })
                    <div class="col-md-3">
                        @Html.TextBoxFor(model => model.AdditionalUser, new { @class = "form-control",@type="number" })
                        @Html.ValidationMessageFor(model => model.AdditionalUser, "", new { @class = "text-danger" })
                    </div>
                    @Html.LabelFor(model => model.IPAddress, htmlAttributes: new { @class = "control-label col-md-3" })
                    <div class="col-md-3">
                        @Html.TextBoxFor(model => model.IPAddress, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.IPAddress, "", new { @class = "text-danger" })
                    </div>

                </div>

            </div>
        </div><!-- /.box-body -->
        <div class="box-footer">

            <div class="col-md-offset-11">

                <input type="submit" id="btnSubmit" value="@valueSubmit" class="btn btn-default" />
            </div>

        </div><!-- box-footer -->

    }
    <script src="~/Scripts/jquery.validate.min.js"></script>
    <script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>
    @*<script src="~/Scripts/ch-treeview.js"></script>*@
    @section Scripts {

        @Scripts.Render("~/bundles/jqueryval")
    }

</div><!-- /.box -->

<script type="text/javascript">
    $(document).ready(function () {
        debugger;
        $(".display-txt#PBranchSetupId").focus();
        $("#createBranchSetup").submit(function () {
            debugger;

            var form = $(this);
            form.validate();
            if (form.valid() == false) {
                InfoAlert("The Required Feild is Empty",1500);
                return false;
            }

            var container = $(this).closest('.panel-create');
            var formData = new FormData($(this)[0]);
            var nodeId = $(this).closest('.BranchSetup-create').find('input#Id').val()
            var wrapperClass = $(this).closest("explore-details").find(".panel-list");
            $.MessageBox({
                buttonDone: "Yes",
                buttonFail: "No",
                message: "Are you sure?"
            }).done(function () {


                $.ajax({
                    url: '@Url.Action("Create", "BranchSetup")',
                    type: 'POST',
                    data: formData,
                    async: false,
                    success: function (data) {
                        debugger;
                        $(container).html(data);



                        $.fn.updateTreeview("BranchSetup","_UpdateBranchSetupTree",1,-1)
                      
                        $.fn.GetLayoutMenu();
                        if(@Model.CompanyId==0)
                        {
                            SuccessAlert("BranchSetup Added Succesfully.",1500);
                        }
                        else
                        {
                            SuccessAlert("BranchSetup Edited Succesfully.",1500);
                        }


                    },
                    error: function (data) {
                        debugger;
                        ErrorAlert(data.responseText, 15000)
                    },
                    cache: false,
                    contentType: false,
                    processData: false
                });
            }).fail(function () {
                //$.MessageBox("you clicked no");
            });

            return false;
        });
        @*$('form').submit(function () {
            debugger;
            var serializedForm = $(this).serialize();
            var nodeId = $(this).find('.section-treeview#PBranchSetupId').find('.internal-value').val()
            var data = { BranchSetup: serializedForm,form1 }
            $.ajax({
                url: '@Url.Action("Create", "BranchSetup")',
                cache: false,
                contentType: false,
                processData: false,
                type: "POST",
                data:serializedForm,
                success: function () {
                    debugger;
                    $.fn.updateTreeview('BranchSetup', '_UpdateBranchSetupTree', nodeId, -1)
                    //function (controller, action, selectedNode, rootNode)
                    //$('.BranchSetup-treeview').find('.treeview-area').load("/BranchSetup/_GetBranchSetupTree", { param: TreeViewParam })
                    //debugger;
                    //$('#explore-details').find('#list').load("/BranchSetup/_Details", { parentId: pid, allowSelectGroup: allowselect })
                },
                error: function (result) {
                    alert("Failed");
                }

            });

            return false;
        });*@


        $('.BranchSetup-create').on('change', '#IsGroup', function (e) {
            debugger;
            e.stopPropagation();
            var container = $(this).closest(".BranchSetup-create").find(".action-controller")
            var contextCheck = $(this).closest(".BranchSetup-create").find("input#IsContextBranchSetup").prop("checked")
            if (!this.checked && contextCheck == false) {
                $.ajax({
                    type: "get",
                    url: '@Url.Action("_CreateAction", "BranchSetup")',
                    contentType: "application/json; charset=utf-8",
                    // data: { parentId: data.nodeId, allowSelectGroup: data.allowSelectGroupNode },
                    dataType: "html",
                    success: function (html) {
                        $(container).html(html);
                    },
                    error: function () {
                        alert("error");
                    }
                });
            }
            else {
                $(container).html("");
            }
        });

        $('.BranchSetup-create').on('change', '#IsContextBranchSetup', function (e) {
            debugger;
            e.stopPropagation();
            var container = $(this).closest(".BranchSetup-create").find(".action-controller")
            var groupCheck = $(this).closest(".BranchSetup-create").find("input#IsGroup").prop("checked")
            if (!this.checked && groupCheck == false) {
                $.ajax({
                    type: "get",
                    url: '@Url.Action("_CreateAction", "BranchSetup")',
                    contentType: "application/json; charset=utf-8",
                    // data: { parentId: data.nodeId, allowSelectGroup: data.allowSelectGroupNode },
                    dataType: "html",
                    success: function (html) {
                        $(container).html(html);
                    },
                    error: function () {
                        alert("error");
                    }
                });
            }
            else {
                $(container).html("");
            }
        });

        $('.BranchSetup-create').on('filterTree', '.section-treeview', function (e, data) {
            debugger;
            e.stopPropagation();

            if (data.fromPopUp == 'false') {

                $dlg_dpicker.load("/BranchSetup/_GetBranchSetupTreePopup", { param: data.param })
            }
            else {
                $dlg_dpicker.find('.treeview-area').load("/BranchSetup/_GetBranchSetupTree", { param: data.param })

            }


        });

        $.fn.GetLayoutMenu = function () {
            debugger;

            $.ajax({
                type: "POST",
                url: "/Menu/GetLayoutMenu/",
                dataType: "html",
                success: function (data) {
                    $('aside.main-sidebar').html(data);
                }
            });
        };

    });


</script>

<style>
    div#loadimage {
        zoom: 27%;
        margin: -89px -3px -29px 81px;
    }
</style>

